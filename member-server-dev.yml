server:
  port: 0

spring:
  security:
    oauth2:
      client:
        registration:
           # /oauth2/authorization/google
          google:
            client-id: google_client_id # TODO https://console.cloud.google.com
            client-secret: google_client_secret # TODO
            scope: profile,email
          # 네이버는 Spring Security를 공식 지원하지 않기 때문에 CommonOAuth2Provider 에서 해주는 값들을 수동으로 입력한다.
          # /oauth2/authorization/naver
          naver:
            client-id: naver_client_id # TODO https://developers.naver.com/apps/#/register?api=nvlogin
            client-secret: naver_client_secret # TODO
            redirect_uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            authorization_grant_type: authorization_code
            scope: name,email,profile_image
            client-name: Naver
          # /oauth2/authorization/kakao
          kakao:
            client-id: kakao_client_id # TODO https://developers.kakao.com/product/kakaoLogin
            client-secret: kakao_client_secret # TODO
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            client-authentication-method: POST
            authorization-grant-type: authorization_code
            scope: profile_nickname, account_email
            client-name: Kakao
        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            # 기준이 되는 user_name 의 이름을 네이버에서는 response로 지정해야한다. (네이버 회원 조회시 반환되는 JSON 형태 때문이다)
            # response를 user_name으로 지정하고 이후 자바 코드로 response의 id를 user_name으로 지정한다. (스프링 시큐리티에서 하위 필드를 명시할 수 없기 때문)
            user_name_attribute: response
          kakao:
            authorization_uri: https://kauth.kakao.com/oauth/authorize
            token_uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user_name_attribute: id
  zipkin:
    base-url: http://localhost:9411 #Open Zipkin 통신에 사용되는 URL
    enabled: true
  sleuth:
    sampler:
      probability: 1.0 #Open Zipkin 으로 데이터를 전송하는 트랜잭션 샘플링 비율
  messages:
    basename: messages, errors
    encoding: UTF-8
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        #show_sql: true
        format_sql: true
        ues_sql_comment: true
        default_batch_fetch_size: 1000
    open-in-view: true
  datasource:
    url: jdbc:mariadb://localhost:3307/jeeok_member_db?allowPublicKeyRetrieval=true&useSSL=false
    username: jeeok_user
    password: jeeok_pass
    driver-class-name: org.mariadb.jdbc.Driver

#actuator config
management:
  endpoints:
    web:
      exposure:
        include: refresh

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

logging:
  level:
    root: info
    org.hibernate.SQL: debug

decorator:
  datasource:
    p6spy:
      enable-logging: true

token:
  access-expired-time: 3600000
  refresh-expired-time: 604800000
  secret: c2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQtc2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQK
  refresh-token-name: refresh-token
  access-token-name: access-token